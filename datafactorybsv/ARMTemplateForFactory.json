{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "datafactorybsv"
		},
		"AzureDataLakeStorage_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage'"
		},
		"AzureSqlDatabase_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase'"
		},
		"AzureSynapseAnalytics_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSynapseAnalytics'"
		},
		"appvm_SelfHostedIntegratedRuntime_Service_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'appvm_SelfHostedIntegratedRuntime_Service'"
		},
		"AzureDataLakeStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://datalakebsv1.dfs.core.windows.net/"
		},
		"appvm_SelfHostedIntegratedRuntime_Service_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "D:\\nginx-1.24.0\\logs"
		},
		"appvm_SelfHostedIntegratedRuntime_Service_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "appusr"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ConditionalSplitPipelineDemo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ConditionalSplitPipelineDemo",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ParquetConditionalSplitDemo",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"LogParquetStream": {},
									"LogParquetSink": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "AzureDataLakeStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-05T00:47:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ParquetConditionalSplitDemo')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFromVmToGen2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "nginxBinary",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AccessLogBinary",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-04T23:28:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/nginxBinary')]",
				"[concat(variables('factoryId'), '/datasets/AccessLogBinary')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CsvToParquet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CsvToParquet",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Correlationid",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Correlationid",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Operationname",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Operationname",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Status",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Eventcategory",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Eventcategory",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Level",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Level",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Time",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Time",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Subscription",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Subscription",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Eventinitiatedby",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Eventinitiatedby",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Resourcetype",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Resourcetype",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Resourcegroup",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Resourcegroup",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Resource",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Resource",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "LogDataCsv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "LogDataParquet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-04T04:37:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LogDataCsv')]",
				"[concat(variables('factoryId'), '/datasets/LogDataParquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimTable_01')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DimTableDataFlow01",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DimTableDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CustomerLogCsvStream": {},
									"ProductAzureSqlStream": {},
									"ProductModelAzureSqlStream": {},
									"ProductCategoryAzureSqlStream": {},
									"CustomerDimSink": {},
									"ProductDestinationSink": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "AzureDataLakeStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-03T21:12:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DimTableDataFlow')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimTable_02')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DimTable_02",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Clone_DimTableDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CustomerLogCsvStream": {},
									"ProductAzureSqlStream": {},
									"ProductModelAzureSqlStream": {},
									"ProductCategoryAzureSqlStream": {},
									"GetMaxFromLoadedData": {},
									"CustomerDimSink": {},
									"ProductDestinationSink": {},
									"SurrogateKeyCacheSink": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "AzureDataLakeStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-03T22:06:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Clone_DimTableDataFlow')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimTable_03')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExistDataDlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Exist_DimTableDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CustomerLogCsvStream": {},
									"ProductAzureSqlStream": {},
									"ProductModelAzureSqlStream": {},
									"ProductCategoryAzureSqlStream": {},
									"GetMaxFromLoadedData": {},
									"DimCustomerLatest": {},
									"DimProductLatest": {},
									"CustomerDimSink": {},
									"ProductDestinationSink": {},
									"SurrogateKeyCacheSink": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "AzureDataLakeStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine",
							"sourceStagingConcurrency": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-03T22:55:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Exist_DimTableDataFlow')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ETL_ParquetToJson')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ParquetToJson",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ParquetToJsonStream": {},
									"JsonDataLakeSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "JsonFileToSqlPoolDB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"writeBehavior": "Insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "JsonLogData",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "LogJson",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-04T06:21:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ParquetToJson')]",
				"[concat(variables('factoryId'), '/datasets/JsonLogData')]",
				"[concat(variables('factoryId'), '/datasets/LogJson')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FilterRowsInLogDataCsv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FilterNonNullRowsDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ParquetFileStream": {},
									"LogDataParquetSqlPoolDbSink": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "AzureDataLakeStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-04T00:22:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/FilterNonNullRowsDataFlow')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadParquetIntoPoolDB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_xnm",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "parquet//Log.parquet"
							},
							{
								"name": "Destination",
								"value": "dbo.LogDataParquet"
							}
						],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"writeBehavior": "Insert",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Correlationid",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Correlationid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Operationname",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Operationname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Status",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Eventcategory",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Eventcategory",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Level",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Level",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Time",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Time",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Subscription",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Subscription",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Eventinitiatedby",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Eventinitiatedby",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Resourcetype",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Resourcetype",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Resourcegroup",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Resourcegroup",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Resource",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Resource",
											"type": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_xnm",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_xnm",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-04T00:14:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_xnm')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_xnm')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParquetToJson')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ParquetToJson",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Correlationid",
											"type": "String"
										},
										"sink": {
											"path": "$Cid"
										}
									},
									{
										"source": {
											"name": "Operationname",
											"type": "String"
										},
										"sink": {
											"path": "$opname"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "LogDataParquet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "JsonLogData",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-04T04:39:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LogDataParquet')]",
				"[concat(variables('factoryId'), '/datasets/JsonLogData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineJsonArraydemo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CustomerArrayDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CustomerJsonStream": {},
									"CustomerJsonSqlPoolDbStream": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "AzureDataLakeStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-04T06:26:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/CustomerArrayDataFlow')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineServerLogsTransformation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PipelineServerLogsTransformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataTransformationOnAccessLog",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"AccessLogStream": {},
									"AccessLogSink": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "AzureDataLakeStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-05T00:21:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DataTransformationOnAccessLog')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetCustomerDirectoryChild",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CustomerDirectory",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEachChildItem",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetCustomerDirectoryChild",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetCustomerDirectoryChild').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyCustomerFileToSqlPoolDB",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "SqlDWSink",
											"writeBehavior": "Insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "CsvCustomerFiles",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DimCustomerTableNoSK",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CustomerDirectory')]",
				"[concat(variables('factoryId'), '/datasets/CsvCustomerFiles')]",
				"[concat(variables('factoryId'), '/datasets/DimCustomerTableNoSK')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AccessLogBinary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "nginx"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AccessLogCsv_Binary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "access.log",
						"fileSystem": "nginx"
					},
					"columnDelimiter": {
						"value": " ",
						"type": "Expression"
					},
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CsvCustomerFiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "Customer",
						"fileSystem": "csv"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CustomerID",
						"type": "String"
					},
					{
						"name": "NameStyle",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "MiddleName",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					},
					{
						"name": "Suffix",
						"type": "String"
					},
					{
						"name": "CompanyName",
						"type": "String"
					},
					{
						"name": "SalesPerson",
						"type": "String"
					},
					{
						"name": "EmailAddress",
						"type": "String"
					},
					{
						"name": "Phone",
						"type": "String"
					},
					{
						"name": "PasswordHash",
						"type": "String"
					},
					{
						"name": "PasswordSalt",
						"type": "String"
					},
					{
						"name": "rowguid",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomerDirectory')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Customer",
						"fileSystem": "csv"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CustomerID",
						"type": "String"
					},
					{
						"name": "NameStyle",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "MiddleName",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					},
					{
						"name": "Suffix",
						"type": "String"
					},
					{
						"name": "CompanyName",
						"type": "String"
					},
					{
						"name": "SalesPerson",
						"type": "String"
					},
					{
						"name": "EmailAddress",
						"type": "String"
					},
					{
						"name": "Phone",
						"type": "String"
					},
					{
						"name": "PasswordHash",
						"type": "String"
					},
					{
						"name": "PasswordSalt",
						"type": "String"
					},
					{
						"name": "rowguid",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomerJson')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "customer.json",
						"folderPath": "Customer",
						"fileSystem": "json"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"customerid": {
							"type": "integer"
						},
						"customername": {
							"type": "string"
						},
						"registered": {
							"type": "boolean"
						},
						"courses": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"details": {
							"type": "object",
							"properties": {
								"mobile": {
									"type": "string"
								},
								"city": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomerJsonSqlPoolDb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerName",
						"type": "varchar"
					},
					{
						"name": "Registered",
						"type": "bit"
					},
					{
						"name": "Courses",
						"type": "varchar"
					},
					{
						"name": "mobile",
						"type": "varchar"
					},
					{
						"name": "city",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Customercourse"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSynapseAnalytics')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomerLogDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Customer02.csv",
						"folderPath": "Customer",
						"fileSystem": "csv"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CustomerID",
						"type": "String"
					},
					{
						"name": "NameStyle",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "MiddleName",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					},
					{
						"name": "Suffix",
						"type": "String"
					},
					{
						"name": "CompanyName",
						"type": "String"
					},
					{
						"name": "SalesPerson",
						"type": "String"
					},
					{
						"name": "EmailAddress",
						"type": "String"
					},
					{
						"name": "Phone",
						"type": "String"
					},
					{
						"name": "PasswordHash",
						"type": "String"
					},
					{
						"name": "PasswordSalt",
						"type": "String"
					},
					{
						"name": "rowguid",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomerPoolDBTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "CustomerJSON"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSynapseAnalytics')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_xnm')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "LogDataParquet"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSynapseAnalytics')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimCustomerTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "CustomerID",
						"type": "nvarchar"
					},
					{
						"name": "CompanyName",
						"type": "nvarchar"
					},
					{
						"name": "SalesPerson",
						"type": "nvarchar"
					},
					{
						"name": "CustomerSK",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimCustomer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSynapseAnalytics')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimCustomerTableNoSK')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CompanyName",
						"type": "varchar"
					},
					{
						"name": "SalesPerson",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimCustomer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSynapseAnalytics')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimProduct')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimProduct"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimProductUpdated')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductName",
						"type": "nvarchar"
					},
					{
						"name": "ProductCategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductModelID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductModelName",
						"type": "nvarchar"
					},
					{
						"name": "ProductCategoryName",
						"type": "nvarchar"
					},
					{
						"name": "ProductSK",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimProduct"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSynapseAnalytics')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JsonLogData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "json"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"Correlationid": {
							"type": "string"
						},
						"Operationname": {
							"type": "string"
						},
						"Status": {
							"type": "string"
						},
						"Eventcategory": {
							"type": "string"
						},
						"Level": {
							"type": "string"
						},
						"Time": {
							"type": "string"
						},
						"Subscription": {
							"type": "string"
						},
						"Eventinitiatedby": {
							"type": "string"
						},
						"Resourcetype": {
							"type": "string"
						},
						"Resourcegroup": {
							"type": "string"
						},
						"Resource": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LogDataCsv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Log.csv",
						"fileSystem": "csv"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Correlationid",
						"type": "String"
					},
					{
						"name": "Operationname",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Eventcategory",
						"type": "String"
					},
					{
						"name": "Level",
						"type": "String"
					},
					{
						"name": "Time",
						"type": "String"
					},
					{
						"name": "Subscription",
						"type": "String"
					},
					{
						"name": "Eventinitiatedby",
						"type": "String"
					},
					{
						"name": "Resourcetype",
						"type": "String"
					},
					{
						"name": "Resourcegroup",
						"type": "String"
					},
					{
						"name": "Resource",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LogDataParquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Log.parquet",
						"fileSystem": "parquet"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "Correlationid",
						"type": "UTF8"
					},
					{
						"name": "Operationname",
						"type": "UTF8"
					},
					{
						"name": "Status",
						"type": "UTF8"
					},
					{
						"name": "Eventcategory",
						"type": "UTF8"
					},
					{
						"name": "Level",
						"type": "UTF8"
					},
					{
						"name": "Time",
						"type": "UTF8"
					},
					{
						"name": "Subscription",
						"type": "UTF8"
					},
					{
						"name": "Eventinitiatedby",
						"type": "UTF8"
					},
					{
						"name": "Resourcetype",
						"type": "UTF8"
					},
					{
						"name": "Resourcegroup",
						"type": "UTF8"
					},
					{
						"name": "Resource",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LogJson')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "LogDataParquet"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSynapseAnalytics')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProductCategoryTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductCategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ParentProductCategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "ProductCategory"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProductModelTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductModelID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "CatalogDescription",
						"type": "xml"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "ProductModel"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProductTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "ProductNumber",
						"type": "nvarchar"
					},
					{
						"name": "Color",
						"type": "nvarchar"
					},
					{
						"name": "StandardCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ListPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Size",
						"type": "nvarchar"
					},
					{
						"name": "Weight",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "ProductCategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductModelID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SellStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SellEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DiscontinuedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ThumbNailPhoto",
						"type": "varbinary"
					},
					{
						"name": "ThumbnailPhotoFileName",
						"type": "nvarchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "Product"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ServerLogs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "Remote_addr",
						"type": "varchar"
					},
					{
						"name": "Time_local",
						"type": "varchar"
					},
					{
						"name": "Request",
						"type": "varchar"
					},
					{
						"name": "Status",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Bytes",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Serverlogs"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSynapseAnalytics')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_xnm')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Log.parquet",
						"fileSystem": "parquet"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "Correlationid",
						"type": "UTF8"
					},
					{
						"name": "Operationname",
						"type": "UTF8"
					},
					{
						"name": "Status",
						"type": "UTF8"
					},
					{
						"name": "Eventcategory",
						"type": "UTF8"
					},
					{
						"name": "Level",
						"type": "UTF8"
					},
					{
						"name": "Time",
						"type": "UTF8"
					},
					{
						"name": "Subscription",
						"type": "UTF8"
					},
					{
						"name": "Eventinitiatedby",
						"type": "UTF8"
					},
					{
						"name": "Resourcetype",
						"type": "UTF8"
					},
					{
						"name": "Resourcegroup",
						"type": "UTF8"
					},
					{
						"name": "Resource",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/nginxBinary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "appvm_SelfHostedIntegratedRuntime_Service",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "access.log"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/appvm_SelfHostedIntegratedRuntime_Service')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSynapseAnalytics')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('AzureSynapseAnalytics_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/appvm_SelfHostedIntegratedRuntime_Service')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('appvm_SelfHostedIntegratedRuntime_Service_properties_typeProperties_host')]",
					"userId": "[parameters('appvm_SelfHostedIntegratedRuntime_Service_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('appvm_SelfHostedIntegratedRuntime_Service_password')]"
					}
				},
				"connectVia": {
					"referenceName": "appvmRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/appvmRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/appvmRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Clone_DimTableDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CustomerLogDataset",
								"type": "DatasetReference"
							},
							"name": "CustomerLogCsvStream"
						},
						{
							"dataset": {
								"referenceName": "ProductTable",
								"type": "DatasetReference"
							},
							"name": "ProductAzureSqlStream"
						},
						{
							"dataset": {
								"referenceName": "ProductModelTable",
								"type": "DatasetReference"
							},
							"name": "ProductModelAzureSqlStream"
						},
						{
							"dataset": {
								"referenceName": "ProductCategoryTable",
								"type": "DatasetReference"
							},
							"name": "ProductCategoryAzureSqlStream"
						},
						{
							"dataset": {
								"referenceName": "DimCustomerTable",
								"type": "DatasetReference"
							},
							"name": "GetMaxFromLoadedData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DimCustomerTable",
								"type": "DatasetReference"
							},
							"name": "CustomerDimSink"
						},
						{
							"dataset": {
								"referenceName": "DimProductUpdated",
								"type": "DatasetReference"
							},
							"name": "ProductDestinationSink"
						},
						{
							"name": "SurrogateKeyCacheSink"
						}
					],
					"transformations": [
						{
							"name": "SelectRequiredColumns"
						},
						{
							"name": "SurrogateKeyStream"
						},
						{
							"name": "ProductLeftJoinProductModel"
						},
						{
							"name": "LeftStreamLeftJoinProductCategory"
						},
						{
							"name": "SelectProductRequiredColumnStream"
						},
						{
							"name": "ProductSurrogateKeyStream"
						},
						{
							"name": "SurrogateKeySetupStream"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as string,",
						"          NameStyle as string,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CustomerLogCsvStream",
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(8,2),",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer,",
						"          SellStartDate as timestamp,",
						"          SellEndDate as timestamp,",
						"          DiscontinuedDate as timestamp,",
						"          ThumbNailPhoto as binary,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductAzureSqlStream",
						"source(output(",
						"          ProductModelID as integer,",
						"          Name as string,",
						"          CatalogDescription as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductModelAzureSqlStream",
						"source(output(",
						"          ProductCategoryID as integer,",
						"          ParentProductCategoryID as integer,",
						"          Name as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductCategoryAzureSqlStream",
						"source(output(",
						"          CustomerID as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          CustomerSK as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select max(customersk) as CustomerSK from dimcustomer ',",
						"     format: 'query',",
						"     staged: true) ~> GetMaxFromLoadedData",
						"CustomerLogCsvStream select(mapColumn(",
						"          CustomerID,",
						"          CompanyName,",
						"          SalesPerson",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectRequiredColumns",
						"SelectRequiredColumns keyGenerate(output(CustomerSK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> SurrogateKeyStream",
						"ProductAzureSqlStream, ProductModelAzureSqlStream join(ProductAzureSqlStream@ProductModelID == ProductModelAzureSqlStream@ProductModelID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> ProductLeftJoinProductModel",
						"ProductLeftJoinProductModel, ProductCategoryAzureSqlStream join(ProductAzureSqlStream@ProductCategoryID == ProductCategoryAzureSqlStream@ProductCategoryID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> LeftStreamLeftJoinProductCategory",
						"LeftStreamLeftJoinProductCategory select(mapColumn(",
						"          ProductID,",
						"          ProductName = ProductAzureSqlStream@Name,",
						"          ProductCategoryID = ProductAzureSqlStream@ProductCategoryID,",
						"          ProductModelID = ProductModelAzureSqlStream@ProductModelID,",
						"          ProductModelName = ProductModelAzureSqlStream@Name,",
						"          ProductCategoryName = ProductCategoryAzureSqlStream@Name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectProductRequiredColumnStream",
						"SelectProductRequiredColumnStream keyGenerate(output(ProductSK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> ProductSurrogateKeyStream",
						"SurrogateKeyStream derive(CustomerSK = CustomerSK + SurrogateKeyCacheSink#outputs()[1].CustomerSK) ~> SurrogateKeySetupStream",
						"SurrogateKeySetupStream sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          CustomerSK as long",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerID,",
						"          CompanyName,",
						"          SalesPerson,",
						"          CustomerSK",
						"     )) ~> CustomerDimSink",
						"ProductSurrogateKeyStream sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductID as integer,",
						"          ProductName as string,",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer,",
						"          ProductModelName as string,",
						"          ProductCategoryName as string,",
						"          ProductSK as long",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductID,",
						"          ProductName,",
						"          ProductCategoryID,",
						"          ProductModelID,",
						"          ProductModelName,",
						"          ProductCategoryName,",
						"          ProductSK",
						"     )) ~> ProductDestinationSink",
						"GetMaxFromLoadedData sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1) ~> SurrogateKeyCacheSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CustomerLogDataset')]",
				"[concat(variables('factoryId'), '/datasets/ProductTable')]",
				"[concat(variables('factoryId'), '/datasets/ProductModelTable')]",
				"[concat(variables('factoryId'), '/datasets/ProductCategoryTable')]",
				"[concat(variables('factoryId'), '/datasets/DimCustomerTable')]",
				"[concat(variables('factoryId'), '/datasets/DimProductUpdated')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomerArrayDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CustomerJson",
								"type": "DatasetReference"
							},
							"name": "CustomerJsonStream"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CustomerJsonSqlPoolDb",
								"type": "DatasetReference"
							},
							"name": "CustomerJsonSqlPoolDbStream"
						}
					],
					"transformations": [
						{
							"name": "FlattenCoursesStrean"
						},
						{
							"name": "surrogateKeyStream"
						}
					],
					"scriptLines": [
						"source(output(",
						"          customerid as integer,",
						"          customername as string,",
						"          registered as boolean,",
						"          courses as string[],",
						"          details as (mobile as string, city as string)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> CustomerJsonStream",
						"CustomerJsonStream foldDown(unroll(courses, courses),",
						"     mapColumn(",
						"          courses,",
						"          customerid,",
						"          customername,",
						"          registered,",
						"          mobile = details.mobile,",
						"          city = details.city",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenCoursesStrean",
						"FlattenCoursesStrean keyGenerate(output(CustomerSK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKeyStream",
						"surrogateKeyStream sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as integer,",
						"          CustomerName as string,",
						"          Registered as boolean,",
						"          Courses as string,",
						"          mobile as string,",
						"          city as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerID = customerid,",
						"          CustomerName = customername,",
						"          Registered = registered,",
						"          Courses = courses,",
						"          mobile,",
						"          city",
						"     )) ~> CustomerJsonSqlPoolDbStream"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CustomerJson')]",
				"[concat(variables('factoryId'), '/datasets/CustomerJsonSqlPoolDb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataTransformationOnAccessLog')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AccessLogCsv_Binary",
								"type": "DatasetReference"
							},
							"name": "AccessLogStream"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ServerLogs",
								"type": "DatasetReference"
							},
							"name": "AccessLogSink"
						}
					],
					"transformations": [
						{
							"name": "SelectRequiredColumns"
						},
						{
							"name": "ModifyTime"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AccessLogStream",
						"AccessLogStream select(mapColumn(",
						"          Remote_addr = Column_1,",
						"          Time_local = Column_4,",
						"          Request = Column_6,",
						"          Status = Column_7,",
						"          Bytes = Column_8",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectRequiredColumns",
						"SelectRequiredColumns derive(Time_local = substring(Time_local, 2, length(Time_local)-1)) ~> ModifyTime",
						"ModifyTime sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Remote_addr as string,",
						"          Time_local as string,",
						"          Request as string,",
						"          Status as integer,",
						"          Bytes as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Remote_addr,",
						"          Time_local,",
						"          Request,",
						"          Status,",
						"          Bytes",
						"     )) ~> AccessLogSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AccessLogCsv_Binary')]",
				"[concat(variables('factoryId'), '/datasets/ServerLogs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimTableDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CustomerLogDataset",
								"type": "DatasetReference"
							},
							"name": "CustomerLogCsvStream"
						},
						{
							"dataset": {
								"referenceName": "ProductTable",
								"type": "DatasetReference"
							},
							"name": "ProductAzureSqlStream"
						},
						{
							"dataset": {
								"referenceName": "ProductModelTable",
								"type": "DatasetReference"
							},
							"name": "ProductModelAzureSqlStream"
						},
						{
							"dataset": {
								"referenceName": "ProductCategoryTable",
								"type": "DatasetReference"
							},
							"name": "ProductCategoryAzureSqlStream"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DimCustomerTable",
								"type": "DatasetReference"
							},
							"name": "CustomerDimSink"
						},
						{
							"dataset": {
								"referenceName": "DimProductUpdated",
								"type": "DatasetReference"
							},
							"name": "ProductDestinationSink"
						}
					],
					"transformations": [
						{
							"name": "SelectRequiredColumns"
						},
						{
							"name": "SurrogateKeyStream"
						},
						{
							"name": "ProductLeftJoinProductModel"
						},
						{
							"name": "LeftStreamLeftJoinProductCategory"
						},
						{
							"name": "SelectProductRequiredColumnStream"
						},
						{
							"name": "ProductSurrogateKeyStream"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as string,",
						"          NameStyle as string,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CustomerLogCsvStream",
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(8,2),",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer,",
						"          SellStartDate as timestamp,",
						"          SellEndDate as timestamp,",
						"          DiscontinuedDate as timestamp,",
						"          ThumbNailPhoto as binary,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductAzureSqlStream",
						"source(output(",
						"          ProductModelID as integer,",
						"          Name as string,",
						"          CatalogDescription as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductModelAzureSqlStream",
						"source(output(",
						"          ProductCategoryID as integer,",
						"          ParentProductCategoryID as integer,",
						"          Name as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductCategoryAzureSqlStream",
						"CustomerLogCsvStream select(mapColumn(",
						"          CustomerID,",
						"          CompanyName,",
						"          SalesPerson",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectRequiredColumns",
						"SelectRequiredColumns keyGenerate(output(CustomerSK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> SurrogateKeyStream",
						"ProductAzureSqlStream, ProductModelAzureSqlStream join(ProductAzureSqlStream@ProductModelID == ProductModelAzureSqlStream@ProductModelID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> ProductLeftJoinProductModel",
						"ProductLeftJoinProductModel, ProductCategoryAzureSqlStream join(ProductAzureSqlStream@ProductCategoryID == ProductCategoryAzureSqlStream@ProductCategoryID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> LeftStreamLeftJoinProductCategory",
						"LeftStreamLeftJoinProductCategory select(mapColumn(",
						"          ProductID,",
						"          ProductName = ProductAzureSqlStream@Name,",
						"          ProductCategoryID = ProductAzureSqlStream@ProductCategoryID,",
						"          ProductModelID = ProductModelAzureSqlStream@ProductModelID,",
						"          ProductModelName = ProductModelAzureSqlStream@Name,",
						"          ProductCategoryName = ProductCategoryAzureSqlStream@Name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectProductRequiredColumnStream",
						"SelectProductRequiredColumnStream keyGenerate(output(ProductSK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> ProductSurrogateKeyStream",
						"SurrogateKeyStream sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          CustomerSK as long",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerID,",
						"          CompanyName,",
						"          SalesPerson,",
						"          CustomerSK",
						"     )) ~> CustomerDimSink",
						"ProductSurrogateKeyStream sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductID as integer,",
						"          ProductName as string,",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer,",
						"          ProductModelName as string,",
						"          ProductCategoryName as string,",
						"          ProductSK as long",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductID,",
						"          ProductName,",
						"          ProductCategoryID,",
						"          ProductModelID,",
						"          ProductModelName,",
						"          ProductCategoryName,",
						"          ProductSK",
						"     )) ~> ProductDestinationSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CustomerLogDataset')]",
				"[concat(variables('factoryId'), '/datasets/ProductTable')]",
				"[concat(variables('factoryId'), '/datasets/ProductModelTable')]",
				"[concat(variables('factoryId'), '/datasets/ProductCategoryTable')]",
				"[concat(variables('factoryId'), '/datasets/DimCustomerTable')]",
				"[concat(variables('factoryId'), '/datasets/DimProductUpdated')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Exist_DimTableDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CustomerLogDataset",
								"type": "DatasetReference"
							},
							"name": "CustomerLogCsvStream"
						},
						{
							"dataset": {
								"referenceName": "ProductTable",
								"type": "DatasetReference"
							},
							"name": "ProductAzureSqlStream"
						},
						{
							"dataset": {
								"referenceName": "ProductModelTable",
								"type": "DatasetReference"
							},
							"name": "ProductModelAzureSqlStream"
						},
						{
							"dataset": {
								"referenceName": "ProductCategoryTable",
								"type": "DatasetReference"
							},
							"name": "ProductCategoryAzureSqlStream"
						},
						{
							"dataset": {
								"referenceName": "DimCustomerTable",
								"type": "DatasetReference"
							},
							"name": "GetMaxFromLoadedData"
						},
						{
							"dataset": {
								"referenceName": "DimCustomerTable",
								"type": "DatasetReference"
							},
							"name": "DimCustomerLatest"
						},
						{
							"dataset": {
								"referenceName": "DimProductUpdated",
								"type": "DatasetReference"
							},
							"name": "DimProductLatest"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DimCustomerTable",
								"type": "DatasetReference"
							},
							"name": "CustomerDimSink"
						},
						{
							"dataset": {
								"referenceName": "DimProductUpdated",
								"type": "DatasetReference"
							},
							"name": "ProductDestinationSink"
						},
						{
							"name": "SurrogateKeyCacheSink"
						}
					],
					"transformations": [
						{
							"name": "SelectRequiredColumns"
						},
						{
							"name": "SurrogateKeyStream"
						},
						{
							"name": "ProductLeftJoinProductModel"
						},
						{
							"name": "LeftStreamLeftJoinProductCategory"
						},
						{
							"name": "SelectProductRequiredColumnStream"
						},
						{
							"name": "ProductSurrogateKeyStream"
						},
						{
							"name": "SurrogateKeySetupStream"
						},
						{
							"name": "CustomerNotExistStream"
						},
						{
							"name": "ProductNotExistStream"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as string,",
						"          NameStyle as string,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CustomerLogCsvStream",
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(8,2),",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer,",
						"          SellStartDate as timestamp,",
						"          SellEndDate as timestamp,",
						"          DiscontinuedDate as timestamp,",
						"          ThumbNailPhoto as binary,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductAzureSqlStream",
						"source(output(",
						"          ProductModelID as integer,",
						"          Name as string,",
						"          CatalogDescription as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductModelAzureSqlStream",
						"source(output(",
						"          ProductCategoryID as integer,",
						"          ParentProductCategoryID as integer,",
						"          Name as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductCategoryAzureSqlStream",
						"source(output(",
						"          CustomerID as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          CustomerSK as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select max(customersk) as CustomerSK from dimcustomer ',",
						"     format: 'query',",
						"     staged: true) ~> GetMaxFromLoadedData",
						"source(output(",
						"          CustomerID as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          CustomerSK as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     staged: true) ~> DimCustomerLatest",
						"source(output(",
						"          ProductID as integer,",
						"          ProductName as string,",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer,",
						"          ProductModelName as string,",
						"          ProductCategoryName as string,",
						"          ProductSK as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     staged: true) ~> DimProductLatest",
						"CustomerNotExistStream select(mapColumn(",
						"          CustomerID,",
						"          CompanyName,",
						"          SalesPerson",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectRequiredColumns",
						"SelectRequiredColumns keyGenerate(output(CustomerSK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> SurrogateKeyStream",
						"ProductNotExistStream, ProductModelAzureSqlStream join(ProductAzureSqlStream@ProductModelID == ProductModelAzureSqlStream@ProductModelID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> ProductLeftJoinProductModel",
						"ProductLeftJoinProductModel, ProductCategoryAzureSqlStream join(ProductAzureSqlStream@ProductCategoryID == ProductCategoryAzureSqlStream@ProductCategoryID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> LeftStreamLeftJoinProductCategory",
						"LeftStreamLeftJoinProductCategory select(mapColumn(",
						"          ProductID,",
						"          ProductName = ProductAzureSqlStream@Name,",
						"          ProductCategoryID = ProductAzureSqlStream@ProductCategoryID,",
						"          ProductModelID = ProductModelAzureSqlStream@ProductModelID,",
						"          ProductModelName = ProductModelAzureSqlStream@Name,",
						"          ProductCategoryName = ProductCategoryAzureSqlStream@Name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectProductRequiredColumnStream",
						"SelectProductRequiredColumnStream keyGenerate(output(ProductSK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> ProductSurrogateKeyStream",
						"SurrogateKeyStream derive(CustomerSK = CustomerSK + SurrogateKeyCacheSink#outputs()[1].CustomerSK) ~> SurrogateKeySetupStream",
						"CustomerLogCsvStream, DimCustomerLatest exists(CustomerLogCsvStream@CustomerID == DimCustomerLatest@CustomerID,",
						"     negate:true,",
						"     broadcast: 'auto')~> CustomerNotExistStream",
						"ProductAzureSqlStream, DimProductLatest exists(ProductAzureSqlStream@ProductID == DimProductLatest@ProductID,",
						"     negate:true,",
						"     broadcast: 'auto')~> ProductNotExistStream",
						"SurrogateKeySetupStream sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          CustomerSK as long",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerID,",
						"          CompanyName,",
						"          SalesPerson,",
						"          CustomerSK",
						"     )) ~> CustomerDimSink",
						"ProductSurrogateKeyStream sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductID as integer,",
						"          ProductName as string,",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer,",
						"          ProductModelName as string,",
						"          ProductCategoryName as string,",
						"          ProductSK as long",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductID,",
						"          ProductName,",
						"          ProductCategoryID,",
						"          ProductModelID,",
						"          ProductModelName,",
						"          ProductCategoryName,",
						"          ProductSK",
						"     )) ~> ProductDestinationSink",
						"GetMaxFromLoadedData sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1) ~> SurrogateKeyCacheSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CustomerLogDataset')]",
				"[concat(variables('factoryId'), '/datasets/ProductTable')]",
				"[concat(variables('factoryId'), '/datasets/ProductModelTable')]",
				"[concat(variables('factoryId'), '/datasets/ProductCategoryTable')]",
				"[concat(variables('factoryId'), '/datasets/DimCustomerTable')]",
				"[concat(variables('factoryId'), '/datasets/DimProductUpdated')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FilterNonNullRowsDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SourceDataset_xnm",
								"type": "DatasetReference"
							},
							"name": "ParquetFileStream"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DestinationDataset_xnm",
								"type": "DatasetReference"
							},
							"name": "LogDataParquetSqlPoolDbSink"
						}
					],
					"transformations": [
						{
							"name": "FilterNonNullResourcegroupRowsStream"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Correlationid as string,",
						"          Operationname as string,",
						"          Status as string,",
						"          Eventcategory as string,",
						"          Level as string,",
						"          Time as string,",
						"          Subscription as string,",
						"          Eventinitiatedby as string,",
						"          Resourcetype as string,",
						"          Resourcegroup as string,",
						"          Resource as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> ParquetFileStream",
						"ParquetFileStream filter(!(isNull(Resourcegroup))) ~> FilterNonNullResourcegroupRowsStream",
						"FilterNonNullResourcegroupRowsStream sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Correlationid,",
						"          Operationname,",
						"          Status,",
						"          Eventcategory,",
						"          Level,",
						"          Time,",
						"          Subscription,",
						"          Eventinitiatedby,",
						"          Resourcetype,",
						"          Resourcegroup,",
						"          Resource",
						"     )) ~> LogDataParquetSqlPoolDbSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_xnm')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_xnm')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParquetConditionalSplitDemo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "LogDataParquet",
								"type": "DatasetReference"
							},
							"name": "LogParquetStream"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DestinationDataset_xnm",
								"type": "DatasetReference"
							},
							"name": "LogParquetSink"
						}
					],
					"transformations": [
						{
							"name": "SplitOnResourceGrp"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Correlationid as string,",
						"          Operationname as string,",
						"          Status as string,",
						"          Eventcategory as string,",
						"          Level as string,",
						"          Time as string,",
						"          Subscription as string,",
						"          Eventinitiatedby as string,",
						"          Resourcetype as string,",
						"          Resourcegroup as string,",
						"          Resource as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> LogParquetStream",
						"LogParquetStream split({Resourcegroup}=='APP-GRP',",
						"     disjoint: false) ~> SplitOnResourceGrp@(AppGrpStream, OtherGroupStream)",
						"SplitOnResourceGrp@AppGrpStream sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Correlationid,",
						"          Operationname,",
						"          Status,",
						"          Eventcategory,",
						"          Level,",
						"          Time,",
						"          Subscription,",
						"          Eventinitiatedby,",
						"          Resourcetype,",
						"          Resourcegroup,",
						"          Resource",
						"     )) ~> LogParquetSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LogDataParquet')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_xnm')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParquetToJson')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "LogDataParquet",
								"type": "DatasetReference"
							},
							"name": "ParquetToJsonStream"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "JsonLogData",
								"type": "DatasetReference"
							},
							"name": "JsonDataLakeSink"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Correlationid as string,",
						"          Operationname as string,",
						"          Status as string,",
						"          Eventcategory as string,",
						"          Level as string,",
						"          Time as string,",
						"          Subscription as string,",
						"          Eventinitiatedby as string,",
						"          Resourcetype as string,",
						"          Resourcegroup as string,",
						"          Resource as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> ParquetToJsonStream",
						"ParquetToJsonStream sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Correlationid as string,",
						"          Operationname as string,",
						"          Status as string,",
						"          Eventcategory as string,",
						"          Level as string,",
						"          Time as string,",
						"          Subscription as string,",
						"          Eventinitiatedby as string,",
						"          Resourcetype as string,",
						"          Resourcegroup as string,",
						"          Resource as string",
						"     ),",
						"     partitionFileNames:['log.json'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Correlationid,",
						"          Operationname,",
						"          Status,",
						"          Eventcategory,",
						"          Level,",
						"          Time,",
						"          Subscription,",
						"          Eventinitiatedby,",
						"          Resourcetype,",
						"          Resourcegroup,",
						"          Resource",
						"     ),",
						"     partitionBy('hash', 1)) ~> JsonDataLakeSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LogDataParquet')]",
				"[concat(variables('factoryId'), '/datasets/JsonLogData')]"
			]
		}
	]
}